name: terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: ci
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2

      - name: Cue Vet
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u cuelang.org/go/cmd/cue
          cue vet schema.cue .github/workflows/terraform.yml

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.9

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: GCloud Setup
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Terraform Init
        id: init
        run: export TF_VAR_state_bucket=davegallant-terraform-state && terraform init -backend-config "bucket=$TF_VAR_state_bucket"

      - name: Pipe variables to file
        run: echo "$TFVARS" > dave.tfvars
        env:
          TFVARS: ${{ secrets.TFVARS }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file dave.tfvars -out terraform.plan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v1
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          name: terraform.plan
          path: terraform.plan

  cd:
    name: cd
    runs-on: ubuntu-20.04
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.9

      - name: GCloud Setup
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Terraform Init
        id: init
        run: export TF_VAR_state_bucket=davegallant-terraform-state && terraform init -backend-config "bucket=$TF_VAR_state_bucket"

      - name: Pipe variables to file
        run: echo "$TFVARS" > dave.tfvars
        env:
          TFVARS: ${{ secrets.TFVARS }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v2
        with:
          name: terraform.plan
      - name: Terraform Apply
        run: terraform apply -auto-approve terraform.plan
